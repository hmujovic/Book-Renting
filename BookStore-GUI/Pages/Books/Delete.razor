@page "/books/delete/{Id}"
@attribute [Authorize(Roles = "Librarian")]

@inject IBookRepository _bookRepo
@inject NavigationManager _navManager

<h3>Are you sure you want to delete this record?</h3>
<br />
<hr />
<br />

@if (!response)
{
	<ErrorMessage Message="Something Went Wrong With the Operation" />
}

@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
	<ErrorMessage Message="Invalid Selection. Please Try Again" />
}
else if (Book == null)
{
	<ErrorMessage Message="Loading Book Details..." />
}
else
{
	<div class="row">
		<div class="col-6">
			<table class="table table-responsive">
				<tr>
					<td>
						<strong>Title</strong>
					</td>
					<td>@Book.Title</td>
				</tr>
				<tr>
					<td>
						<strong>Summary</strong>
					</td>
					<td>@Book.Summary</td>
				</tr>
				<tr>
					<td>
						<strong>Published Year</strong>
					</td>
					<td>@Book.Year</td>
				</tr>
				<tr>
					<td>
						<strong>Author</strong>
					</td>
					<td>@Book.Author</td>
				</tr>
			</table>
		</div>
	</div>
}

<button @onclick="DeleteBook" class="btn btn-danger">
	<span class="oi oi-media-skip-backward"></span>
	Delete Book
</button>
<button @onclick="BackToList" class="btn btn-outline-secondary">
	<span class="oi oi-media-skip-backward"></span>
	Back To List
</button>

@code {
	[Parameter]
	public string Id { get; set; }

	private Book Book = new Book();
	private bool response = true;
	private HubConnection hubConnection;

	protected override async Task OnInitializedAsync()
	{
		int id = Convert.ToInt32(Id);
		Book = await _bookRepo.Get(Endpoints.BooksEndpoint, id);

		var hubUrl = $"{Endpoints.BaseUrl}broadcastHub";
		hubConnection = new HubConnectionBuilder()
			.WithUrl(hubUrl)
			.Build();

		await hubConnection.StartAsync();
	}

	Task SendMessage() => hubConnection.SendAsync("SendMessage");

	public bool IsConnected =>
		hubConnection.State == HubConnectionState.Connected;

	public void Dispose()
	{
		_ = hubConnection.DisposeAsync();
	}

	private async Task DeleteBook()
	{
		response = await _bookRepo.Delete(Endpoints.BooksEndpoint, Book.Id);
		if (response)
		{
			if (IsConnected) await SendMessage();
			StateHasChanged();

			BackToList();
		}
	}

	private void BackToList()
	{
		_navManager.NavigateTo("/books/");
	}
}
